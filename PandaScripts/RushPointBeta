local OwlESP = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/SkieAdmin/PandaHub/master/OwlESP.lua"))();

local players = game:GetService("Players");
local runService = game:GetService("RunService");
local localPlayer = players.LocalPlayer;
local tracking = {};

local remove = table.remove;
local fromRGB = Color3.fromRGB;

function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end
counter = 0
local espColor = fromRGB(255,0,0);
local teamCheck = false;

local function characterRemoving(char)
    for i, v in next, tracking do
        if v.char == char then
            v:remove();
            remove(tracking, i);
        end;
    end;
end;

local function characterAdded(plr)
    local char = plr.Character;
    char:WaitForChild("HumanoidRootPart"); char:WaitForChild("Head");
    tracking[#tracking + 1] = OwlESP.new({
        plr = plr,
        espBoxVisible = true,
        tracerVisible = true,
        text = plr.Name,
        teamCheck = teamCheck,
        espColor = espColor,
    });
end;

for i, v in next, players:GetPlayers() do
    if v ~= localPlayer then
        local char = v.Character;
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Head") then
            tracking[#tracking + 1] = OwlESP.new({
                plr = v,
                espBoxVisible = true,
                tracerVisible = true,
                text = v.Name,
                teamCheck = teamCheck,
                espColor = espColor
            });
        end;
        v.CharacterAdded:Connect(function()
            characterAdded(v);
        end);
        v.CharacterRemoving:Connect(characterRemoving);
    end;
end;

local function playerAdded(plr)
    plr.CharacterAdded:Connect(function()
        characterAdded(plr);
    end);
    plr.CharacterRemoving:Connect(characterRemoving);
end;

players.PlayerAdded:Connect(playerAdded);

runService.RenderStepped:Connect(function()
    for i, v in next, tracking do
        v:update();
    end;
end);

wait(1.2)
game.StarterGui:SetCore("SendNotification", {
Title = "Rush Point"; -- the title (ofc)
Text = "Script Loaded, Wait for a Pop-up Messagebox to be appear"; -- what the text says (ofc)
Duration = 5; -- how long the notification should in secounds
})

-- // Dependencies
local Aiming = loadstring(game:HttpGet("https://raw.githubusercontent.com/Stefanuk12/Aiming/main/Load.lua"))()("Module", "RushPoint")
local AimingChecks = Aiming.Checks
local AimingSelected = Aiming.Selected

-- // Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- // Vars
local CurrentCamera = Workspace.CurrentCamera
local CFramelookAt = CFrame.lookAt

local WeaponManagerClient = require(ReplicatedStorage.Modules.Client.Managers.WeaponManagerClient)
local Shoot = WeaponManagerClient.Shoot

-- // Get rid of their lmao check against this
debug.setupvalue(Shoot, 5, function()
    if (AimingChecks.IsAvailable()) then
        local Origin = CurrentCamera.CFrame.Position
        local Destination = AimingSelected.Part.Position

        local Modified = CFramelookAt(Origin, Destination)
        return Modified
    end
end)

-- // Hook
local __index
__index = hookmetamethod(game, "__index", function(t, k)
    -- // Make sure it is the shoot function trying to get the camera's cframe
    if (not checkcaller() and t == CurrentCamera and k == "CFrame" and AimingChecks.IsAvailable() and debug.validlevel(3) and #debug.getupvalues(3) == 12) then
        -- // Vars
        local callingscript = getcallingscript()

        -- // Make sure is not anti cheat
        if (callingscript.Parent ~= nil) then
            -- // Vars
            local Origin = __index(t, k).Position
            local Destination = AimingSelected.Part.Position

            -- // Return modified
            local Modified = CFramelookAt(Origin, Destination)
            return Modified
        end
    end

    -- // Return old
    return __index(t, k)
end)
